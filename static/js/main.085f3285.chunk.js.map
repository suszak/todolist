{"version":3,"sources":["containers/Header/Header.js","components/NavBar/NavBar.js","components/ToDoItem/ToDoItem.js","components/ToDoList/ToDoList.js","containers/Main/Main.js","containers/Footer/Footer.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","NavBar","props","handleChange","date","a","setState","startDate","updateDate","state","inputFocused","sectionName","document","querySelector","classList","add","remove","inputUnfocused","value","moveLabel","bind","id","for","type","name","onChange","this","updateDraft","onFocus","onBlur","draft","updateCity","city","selected","dateFormat","onClick","updateTaskList","ToDoItem","temp","weather","hidden","getWeatherFromApi","fetch","task","response","status","json","Math","round","main","description","console","error","statusText","then","done","changeState","deleteTask","ToDoList","tasks","map","key","Main","event","target","tasksArray","idArray","push","max","taskId","newArray","splice","findIndex","index","Footer","App","tasksList","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gQAaeA,G,6LARP,OACI,4BAAQC,UAAU,UACd,wBAAIA,UAAU,iBAAd,mB,GAJKC,c,kECqENC,G,wBAlEX,WAAaC,GAAQ,IAAD,8BAChB,4CAAMA,KAOVC,aARoB,uCAQL,WAAOC,GAAP,SAAAC,EAAA,sEACL,EAAKC,SAAS,CACZC,UAAWH,IAFR,OAKX,EAAKF,MAAMM,WAAW,EAAKC,MAAMF,WALtB,2CARK,wDAiBpBG,aAAe,SAACC,GACZC,SAASC,cAAT,WAA2BF,EAA3B,YAAiDG,UAAUC,IAA3D,UAAkEJ,EAAlE,oBACAC,SAASC,cAAT,WAA2BF,EAA3B,YAAiDG,UAAUE,OAAO,qBAnBlD,EAsBpBC,eAAiB,SAACN,GACTC,SAASC,cAAT,WAA2BF,EAA3B,YAAiDO,OAClDN,SAASC,cAAT,WAA2BF,EAA3B,YAAiDG,UAAUE,OAA3D,UAAqEL,EAArE,qBAxBY,EA4BpBQ,UAAY,WACJP,SAASC,cAAc,gBAAgBK,OACvCN,SAASC,cAAc,gBAAgBC,UAAUE,OAAO,uBAGxDJ,SAASC,cAAc,gBAAgBK,OACvCN,SAASC,cAAc,gBAAgBC,UAAUE,OAAO,uBAGxDJ,SAASC,cAAc,gBAAgBK,OACvCN,SAASC,cAAc,gBAAgBC,UAAUE,OAAO,wBApC5D,EAAKP,MAAQ,CACTF,UAAW,IAEf,EAAKJ,aAAe,EAAKA,aAAaiB,KAAlB,gBALJ,E,sEA0CV,IAAD,OACL,OACI,yBAAKrB,UAAU,iBACX,6BAASA,UAAU,QACf,yBAAKA,UAAU,UAAUsB,GAAG,eAA5B,uBACA,2BAAOC,IAAI,YAAYvB,UAAU,eAAjC,0BACA,2BAAOwB,KAAK,OAAOC,KAAK,YAAYzB,UAAU,cAAcsB,GAAG,aAAaI,SAAUC,KAAKxB,MAAMyB,YAAaC,QAAS,WAAO,EAAKlB,aAAa,SAAUmB,OAAQ,WAAO,EAAKZ,eAAe,SAAUC,MAAOQ,KAAKxB,MAAMO,MAAMqB,SAEnO,6BAAS/B,UAAU,QACf,yBAAKA,UAAU,UAAUsB,GAAG,eAA5B,uBACA,2BAAOC,IAAI,YAAYvB,UAAU,eAAjC,yBACA,2BAAOwB,KAAK,OAAOC,KAAK,YAAYzB,UAAU,cAAcsB,GAAG,YAAYI,SAAUC,KAAKxB,MAAM6B,WAAYH,QAAS,WAAO,EAAKlB,aAAa,SAAUmB,OAAQ,WAAO,EAAKZ,eAAe,SAAUC,MAAOQ,KAAKxB,MAAMO,MAAMuB,QAEjO,6BAASjC,UAAU,QACf,yBAAKA,UAAU,UAAUsB,GAAG,eAA5B,uBACA,2BAAOC,IAAI,YAAYvB,UAAU,eAAjC,kBACA,kBAAC,IAAD,CAAYkC,SAAUP,KAAKjB,MAAMF,UAAWkB,SAAUC,KAAKvB,aAAckB,GAAG,YAAYG,KAAK,YAAYzB,UAAU,cAAc6B,QAAS,WAAO,EAAKlB,aAAa,SAAUmB,OAAQ,WAAO,EAAKZ,eAAe,SAAUC,MAAOQ,KAAKjB,MAAMF,UAAW2B,WAAW,gBAEtQ,4BAAQnC,UAAU,wBAAwBoC,QAAO,sBAAE,sBAAA9B,EAAA,sEAAoB,EAAKH,MAAMkC,iBAA/B,OAAiD,EAAKjB,YAAtD,4CAAnD,iB,GA7DKnB,cCyCNqC,G,yNA1CX5B,MAAQ,CACJ6B,KAAM,GACNC,QAAS,GACTC,QAAQ,G,EAGZC,kB,sBAAoB,8BAAApC,EAAA,+EAEWqC,MAAM,4FAAD,OAA6F,EAAKxC,MAAMyC,KAAKX,KAA7G,0BAFhB,UAGW,OADjBY,EAFM,QAGAC,OAHA,iCAIcD,EAASE,OAJvB,OAIFP,EAJE,OAKR,EAAKjC,SAAS,CAAEgC,KAAM,gBAAgBS,KAAKC,MAAMT,EAAQU,KAAKX,MAAM,QAAMC,QAASA,EAAQA,QAAQ,GAAGW,cAL9F,wBAOR,EAAK5C,SAAS,CAAEgC,KAAM,iBAAkBC,QAAS,KACjDY,QAAQC,MAAMR,EAASS,YARf,0DAWZF,QAAQC,MAAR,MAXY,0D,mFAeC,IAAD,OAChB1B,KAAKe,oBAAoBa,MAAK,WAC1B,EAAKhD,SAAS,CAACkC,QAAQ,S,+BAIrB,IAAD,OACL,OACI,6BAASzC,UAAU,YACf,0BAAMA,UAAW2B,KAAKxB,MAAMyC,KAAKY,KAAK,sCAAsC,iBAAkBpB,QAAS,WAAO,EAAKjC,MAAMsD,YAAY,EAAKtD,MAAMyC,KAAKtB,MAAO,8BAAOK,KAAKxB,MAAMyC,KAAKnB,OACnL,0BAAMzB,UAAU,kBAAkB2B,KAAKxB,MAAMyC,KAAKX,MAClD,6BAASjC,UAAW2B,KAAKjB,MAAM+B,OAAO,0BAA0B,WAC5D,0BAAMzC,UAAU,iBAAiB2B,KAAKjB,MAAM6B,MAC5C,0BAAMvC,UAAU,iBAAiB2B,KAAKjB,MAAM8B,UAEhD,0BAAMJ,QAAS,WAAO,EAAKjC,MAAMuD,WAAW,EAAKvD,MAAMyC,KAAKtB,KAAMtB,UAAU,oBAAmB,uBAAGA,UAAU,8B,GArCrGC,cCWR0D,E,iLATD,IAAD,OACL,OACI,6BAAS3D,UAAU,YACd2B,KAAKxB,MAAMO,MAAMkD,MAAMC,KAAI,SAACjB,GAAD,OAAU,kBAAC,EAAD,CAAUA,KAAMA,EAAMc,WAAY,EAAKvD,MAAMuD,WAAYD,YAAa,EAAKtD,MAAMsD,YAAaK,IAAKlB,EAAKtB,a,GAJvIrB,aC4FR8D,E,2MA1FXrD,MAAQ,CACJkD,MAAO,EAAKzD,MAAMyD,MAClB7B,MAAO,GACPE,KAAM,GACN5B,KAAM,I,EAIVuB,YAAc,SAACoC,GACX,EAAKzD,SAAS,CAACwB,MAAOiC,EAAMC,OAAO9C,S,EAIvCa,WAAa,SAACgC,GACV,EAAKzD,SAAS,CAAC0B,KAAM+B,EAAMC,OAAO9C,S,EAItCV,WAAa,SAACU,GACV,EAAKZ,SAAS,CAACF,KAAMc,K,EAIzBkB,eAAiB,WACb,GAAI,EAAK3B,MAAMqB,OAAU,EAAKrB,MAAMuB,MAAS,EAAKvB,MAAML,KAWjD,CACP,IAAI6D,EAAa,EAAKxD,MAAMkD,MACtBO,EAAUD,EAAWL,KAAI,SAAAjB,GACvB,OAAOA,EAAKtB,MAIpBT,SAASC,cAAc,eAAeC,UAAUE,OAAO,sBACvDJ,SAASC,cAAc,cAAcC,UAAUE,OAAO,sBAEtDiD,EAAWE,KAAK,CAAC3C,KAAM,EAAKf,MAAMqB,MAAOE,KAAM,EAAKvB,MAAMuB,KAAMX,GAAI0B,KAAKqB,IAAL,MAAArB,KAAI,YAAQmB,IAAS,EAAGX,MAAM,IAClG,EAAKjD,SAAS,CAACqD,MAAOM,EAAYnC,MAAO,GAAIE,KAAM,UArB3C,EAAKvB,MAAMqB,QACXlB,SAASC,cAAc,eAAeC,UAAUC,IAAI,sBACpDH,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,qBACnD,EAAKN,MAAMuB,OACbpB,SAASC,cAAc,cAAcC,UAAUC,IAAI,sBACnDH,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,qBACnD,EAAKN,MAAML,OACbQ,SAASC,cAAc,cAAcC,UAAUC,IAAI,sBACnDH,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,sB,EAkBjE0C,WAAa,SAACY,GACV,IAAIH,EAAU,EAAKzD,MAAMkD,MAAMC,KAAI,SAAAjB,GAC/B,OAAOA,EAAKtB,MAGZiD,EAAW,EAAK7D,MAAMkD,MAC1BW,EAASC,OAAOL,EAAQM,WAAU,SAACtD,GAC/B,OAAOA,IAAUmD,KACjB,GAEJ,EAAK/D,SAAS,CAACqD,MAAOW,K,EAI1Bd,YAAc,SAACa,GACX,IAGMI,EAHU,EAAKhE,MAAMkD,MAAMC,KAAI,SAAAjB,GACjC,OAAOA,EAAKtB,MAEMmD,WAAU,SAACtD,GAC7B,OAAOA,IAAUmD,KAGjBC,EAAW,EAAK7D,MAAMkD,MAE1BW,EAASG,GAAS,CAACjD,KAAM8C,EAASG,GAAOjD,KAAMH,GAAIiD,EAASG,GAAOpD,GAAIW,KAAMsC,EAASG,GAAOzC,KAAMuB,MAAOe,EAASG,GAAOlB,MAE1H,EAAKjD,SAAS,CAACqD,MAAOW,K,wEAItB,OACI,0BAAMvE,UAAU,QACZ,kBAAC,EAAD,CAAQU,MAAOiB,KAAKjB,MAAOkB,YAAaD,KAAKC,YAAaI,WAAYL,KAAKK,WAAYvB,WAAYkB,KAAKlB,WAAY4B,eAAgBV,KAAKU,iBACzI,kBAAC,EAAD,CAAU3B,MAAOiB,KAAKjB,MAAOgD,WAAY/B,KAAK+B,WAAYD,YAAa9B,KAAK8B,mB,GArFzExD,aCaJ0E,G,wLAbP,OACI,4BAAQ3E,UAAU,UACd,6BAASA,UAAU,QACf,0BAAMA,UAAU,cAAhB,gBACA,0BAAMA,UAAU,gBAAhB,WACA,0BAAMA,UAAU,gBAAhB,aACA,0BAAMA,UAAU,cAAhB,c,GARCC,cCiBN2E,E,2MAbbC,UAAY,CAAC,CAACvD,GAAI,EAAGG,KAAM,aAAcQ,KAAM,UAAWuB,MAAM,GAAQ,CAAClC,GAAI,EAAGG,KAAM,cAAeQ,KAAM,WAAYuB,MAAM,I,wEAG3H,OACE,yBAAKxD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM4D,MAAOjC,KAAKkD,YAClB,kBAAC,EAAD,W,GARU5E,aCME6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvE,SAASwE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLD,QAAQC,MAAMA,EAAMuC,a","file":"static/js/main.085f3285.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return(\r\n            <header className='header'>\r\n                <h1 className='header__title'>ToDo list:</h1>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header ","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport './NavBar.css';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass NavBar extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            startDate: ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n        \r\n    handleChange = async (date) => {\r\n        await this.setState({\r\n                startDate: date\r\n        });\r\n        \r\n        this.props.updateDate(this.state.startDate);\r\n    }\r\n    \r\n\r\n    inputFocused = (sectionName) => {\r\n        document.querySelector(`.${sectionName}__label`).classList.add(`${sectionName}__label--active`);\r\n        document.querySelector(`#${sectionName}Tooltip`).classList.remove('tooltip--visible');\r\n    }\r\n\r\n    inputUnfocused = (sectionName) => {\r\n        if (!document.querySelector(`.${sectionName}__input`).value) {\r\n            document.querySelector(`.${sectionName}__label`).classList.remove(`${sectionName}__label--active`);\r\n        }\r\n    }\r\n\r\n    moveLabel = () => {\r\n        if(!document.querySelector('.task__input').value) {\r\n            document.querySelector('.task__label').classList.remove('task__label--active');\r\n        }\r\n\r\n        if(!document.querySelector('.city__input').value) {\r\n            document.querySelector('.city__label').classList.remove('city__label--active');\r\n        }\r\n\r\n        if(!document.querySelector('.date__input').value) {\r\n            document.querySelector('.date__label').classList.remove('date__label--active');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <nav className=\"navigationBar\">\r\n                <section className='task'>\r\n                    <div className='tooltip' id='taskTooltip'>It cannot be empty!</div>\r\n                    <label for='taskInput' className='task__label'>Type your task here...</label>\r\n                    <input type='text' name='taskInput' className='task__input' id='draftInput' onChange={this.props.updateDraft} onFocus={() => {this.inputFocused('task')}} onBlur={() => {this.inputUnfocused('task')}} value={this.props.state.draft}></input>\r\n                </section>\r\n                <section className='city'>\r\n                    <div className='tooltip' id='cityTooltip'>It cannot be empty!</div>\r\n                    <label for='cityInput' className='city__label'>Type location here...</label>\r\n                    <input type='text' name='cityInput' className='city__input' id='cityInput' onChange={this.props.updateCity} onFocus={() => {this.inputFocused('city')}} onBlur={() => {this.inputUnfocused('city')}} value={this.props.state.city}></input>\r\n                </section>\r\n                <section className='date'>\r\n                    <div className='tooltip' id='dateTooltip'>It cannot be empty!</div>\r\n                    <label for='dateInput' className='date__label'>Choose date...</label>\r\n                    <DatePicker selected={this.state.startDate} onChange={this.handleChange} id='dateInput' name='dateInput' className='date__input' onFocus={() => {this.inputFocused('date')}} onBlur={() => {this.inputUnfocused('date')}} value={this.state.startDate} dateFormat='dd/MM/yyyy'/>\r\n                </section>\r\n                <button className='navigationBar__button' onClick={async () => { await this.props.updateTaskList(); this.moveLabel()}} >Add task</button>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar","import React, { Component } from 'react';\r\nimport './ToDoItem.css';\r\n\r\nclass ToDoItem extends Component {\r\n    state = {\r\n        temp: '',\r\n        weather: '',\r\n        hidden: true\r\n    }\r\n\r\n    getWeatherFromApi = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=0c79a3e8f66a976ec6832ddc76907c72&q=${this.props.task.city}&units=metric&lang=en`);\r\n            if(response.status === 200) {\r\n                const weather = await response.json();\r\n                this.setState({ temp: 'Temperature: '+Math.round(weather.main.temp)+'°C', weather: weather.weather[0].description });\r\n            } else {\r\n                this.setState({ temp: 'City not found', weather: '' });\r\n                console.error(response.statusText); \r\n            }\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getWeatherFromApi().then(() => {\r\n            this.setState({hidden: false});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <section className='todoItem'>\r\n                <span className={this.props.task.done?'todoItem__name todoItem__name--done':'todoItem__name'} onClick={() => {this.props.changeState(this.props.task.id)}} ><span>{this.props.task.name}</span></span>\r\n                <span className='todoItem__city'>{this.props.task.city}</span>\r\n                <section className={this.state.hidden?'weather weather--hidden':'weather'}>\r\n                    <span className='weather__temp'>{this.state.temp}</span>\r\n                    <span className='weather__info'>{this.state.weather}</span>\r\n                </section>\r\n                <span onClick={() => {this.props.deleteTask(this.props.task.id)}} className='todoItem__delete'><i className='fas fa-minus-circle'></i></span>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoItem","import React, { Component } from 'react';\r\nimport './ToDoList.css';\r\nimport ToDoItem from '../ToDoItem/ToDoItem';\r\n\r\nclass ToDoList extends Component {\r\n    render() {\r\n        return(\r\n            <section className='todoList'>\r\n                {this.props.state.tasks.map((task) => <ToDoItem task={task} deleteTask={this.props.deleteTask} changeState={this.props.changeState} key={task.id}/>)}\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoList","import React, { Component } from 'react';\r\nimport './Main.css';\r\nimport NavBar from '../../components/NavBar/NavBar'\r\nimport ToDoList from '../../components/ToDoList/ToDoList'\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        tasks: this.props.tasks,\r\n        draft: '',\r\n        city: '',\r\n        date: ''\r\n    }\r\n\r\n    // Update draft input value:\r\n    updateDraft = (event) => {\r\n        this.setState({draft: event.target.value});\r\n    }\r\n\r\n    // Update city input value:\r\n    updateCity = (event) => {\r\n        this.setState({city: event.target.value});\r\n    }\r\n\r\n    // Update date input value:\r\n    updateDate = (value) => {\r\n        this.setState({date: value});\r\n    }\r\n\r\n    // Add new task:\r\n    updateTaskList = () => {\r\n        if(!this.state.draft || !this.state.city || !this.state.date) {\r\n            if(!this.state.draft) {\r\n                document.querySelector('#draftInput').classList.add('task__input--empty');\r\n                document.querySelector('#taskTooltip').classList.add('tooltip--visible');\r\n            } if(!this.state.city) {\r\n                document.querySelector('#cityInput').classList.add('city__input--empty');\r\n                document.querySelector('#cityTooltip').classList.add('tooltip--visible');\r\n            } if(!this.state.date) {\r\n                document.querySelector('#dateInput').classList.add('date__input--empty');\r\n                document.querySelector('#dateTooltip').classList.add('tooltip--visible');\r\n            }\r\n        } else {\r\n        let tasksArray = this.state.tasks;\r\n        const idArray = tasksArray.map(task => {\r\n                return task.id;\r\n            }\r\n        );\r\n        \r\n        document.querySelector('#draftInput').classList.remove('task__input--empty');\r\n        document.querySelector('#cityInput').classList.remove('city__input--empty');\r\n\r\n        tasksArray.push({name: this.state.draft, city: this.state.city, id: Math.max(...idArray)+1, done: false});\r\n        this.setState({tasks: tasksArray, draft: '', city: ''});\r\n        }\r\n    }\r\n\r\n    // Delete task:\r\n    deleteTask = (taskId) => {\r\n        let idArray = this.state.tasks.map(task => {\r\n            return task.id;\r\n        });\r\n\r\n        let newArray = this.state.tasks;\r\n        newArray.splice(idArray.findIndex((value) => {\r\n            return value === taskId;\r\n        }), 1);\r\n        \r\n        this.setState({tasks: newArray});\r\n    }\r\n\r\n    // Change state done/todo\r\n    changeState = (taskId) => {\r\n        const idArray = this.state.tasks.map(task => {\r\n            return task.id;\r\n        });\r\n        const index = idArray.findIndex((value) => {\r\n            return value === taskId;\r\n        });\r\n\r\n        let newArray = this.state.tasks;\r\n        \r\n        newArray[index] = {name: newArray[index].name, id: newArray[index].id, city: newArray[index].city, done: !newArray[index].done};\r\n        \r\n        this.setState({tasks: newArray});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <main className='main'>\r\n                <NavBar state={this.state} updateDraft={this.updateDraft} updateCity={this.updateCity} updateDate={this.updateDate} updateTaskList={this.updateTaskList} />\r\n                <ToDoList state={this.state} deleteTask={this.deleteTask} changeState={this.changeState}/>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main ","import React, { Component } from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return(\r\n            <footer className='footer'>\r\n                <section className='text'>\r\n                    <span className='text__info'>Created by: </span>\r\n                    <span className='text__author'>Mateusz</span>\r\n                    <span className='text__author'>Greń</span>\r\n                    <span className='text__date'>2020</span>\r\n                </section>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer ","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from '../Header/Header';\r\nimport Main from '../Main/Main';\r\nimport Footer from '../Footer/Footer'\r\n\r\nclass App extends Component {\r\n  tasksList = [{id: 0, name: 'First task', city: 'Cieszyn', done: false}, {id: 1, name: 'Second task', city: 'Warszawa', done: false}];\r\n\r\n  render() {\r\n    return(\r\n      <div className='app'>\r\n        <Header />\r\n        <Main tasks={this.tasksList}/>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}